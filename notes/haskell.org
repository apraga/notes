* Démarrer un projet rapidement
** Script en un seul fichier (cabal)
`cabal run` sur le script suivant (ou chmod +x)
#+begin_src haskell
#!/usr/bin/env cabal
{- cabal:
build-depends: base
            , turtle
-}
{-# LANGUAGE OverloadedStrings #-}
import Turtle
main = echo "Hello World!"
#+end_src
** Script en un seul fichier (stack)
`stack run` sur le script suivant (ou chmod +x)
#+begin_src haskell
-- stack --resolver lts-6.25 script --package turtle
{-# LANGUAGE OverloadedStrings #-}
import Turtle
main = echo "Hello World!"
#+end_src

** Avec stack
#+begin_src sh
stack script simple.hs --resolver lts-14.18
#+end_src
* Data analysis
** Frames
Minimal example
#+begin_src haskell
{-# LANGUAGE DataKinds, FlexibleContexts, QuasiQuotes, TemplateHaskell, TypeApplications,
TypeApplications#-}
import Lens.Micro.Extras
import qualified Data.Foldable as F
import Frames

-- Data set from http://vincentarelbundock.github.io/Rdatasets/datasets.html
tableTypes "TLeft" "data/prestige.csv"
tableTypes "TRight" "data/test.csv"

loadLeft :: IO (Frame TLeft)
loadLeft = inCoreAoS (readTable "data/prestige.csv")

loadRight :: IO (Frame TRight)
loadRight = inCoreAoS (readTable "data/test.csv")


main = do
  l <- loadLeft
  r <- loadRight
  -- Native way of showing a row
  print $ frameRow l 1
  -- List-style way of showing a row
  print $ take 2 $ F.toList l

  let t = innerJoin @'[ColType] l r
  print $ frameRow t 1

#+end_src
* Divers
** Cabal vs stack
   :PROPERTIES:
   :CUSTOM_ID: cabal-vs-stack
   :END:

Stack: facile à utiliser mais parfois non à jour Cabal: utiliser avec
ghcup NB: Sous archlinux, le linking dynamique est utilisé par défaut et
ne semble pas marcher avec cabal. Par exemple, wreq ne trouve pas le
Prelude.. On peut installer ghc-static ou bien utiliser ghcup
(recommandé
[[https://github.com/haskell/haskell-ide-engine/issues/1647][ici]] )

- [X] installer avec ghcup - [X] Tester sur getbook - [X] Tester sur
askhistorians
