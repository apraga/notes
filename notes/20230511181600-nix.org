:PROPERTIES:
:ID:       3784eb33-d9cc-4282-bd7d-ee6c169703d2
:END:
#+title: Nix
#+filetags: cs
* Nixos
Installer nix. Par exemple, sous WSL:
https://github.com/nix-community/NixOS-WSL

Puis modifier /etc/nixos/configuration.nix.

** 1. Emacs nativecomp + flakes + WSL
Il faut rajouter un overlay. Cela va compiler emacs
#+begin_src sh
{ lib, pkgs, config, modulesPath, ... }:

with lib;
let
  nixos-wsl = import ./nixos-wsl;
in
{
  imports = [
    "${modulesPath}/profiles/minimal.nix"

    nixos-wsl.nixosModules.wsl
  ];

  wsl = {
    enable = true;
    automountPath = "/mnt";
    defaultUser = "nixos";
    startMenuLaunchers = true;

    # Enable integration with Docker Desktop (needs to be installed)
    # docker.enable = true;
  };

  # Enable nix flakes
  nix.package = pkgs.nixFlakes;
  nix.extraOptions = ''
    experimental-features = nix-command flakes
  '';

  # Emacs28 with nativecomp
  services.emacs.package = pkgs.emacsNativeComp;

  nixpkgs.overlays = [
    (import (builtins.fetchTarball {
      url = https://github.com/nix-community/emacs-overlay/archive/master.tar.gz;
    }))
  ];

  environment.systemPackages = with pkgs; [
          emacsNativeComp
  ];
}
#+end_src
Puis installer avec
#+begin_src
nixos-rebuild switch
#+end_src
** 2. Ajouter des logiciels au niveau global
il sufit de modifier
#+begin_src
  environment.systemPackages
#+end_src
et de lancer ensuite
#+begin_src sh
nix-os rebuild switch
#+end_src
NB: il manque man par défaut !.
Doc officielle : https://nixos.org/manual/nixos/stable/
** Suive avancement des branches (unrstable, stable...)
Plusieurs possibilités
1. https://nixpk.gs/pr-tracker.html?pr=188777
2. https://status.nixos.org/
3. Simply clicking on a commit on GitHub shows branches and tags containing that commit.

* Nix
Activer les flakes (experimental) ! Meilleure expérience utilisateur
** WSL2: changer /nix/store
Pour accéder à un lecteur US:, rajouter dans /etc/fstabl
#+begin_src sh
 E: /mnt/e drvfs defaults,uid=1000,gid=1000,metadata 0 0
#+end_src
`metadata` est important car cela nous permet de changer les permissions !
Puis
#+begin_src sh
mount --bind /mnt/e/nix /nix
#+end_src
** Recherche
`nix-env` est lent. `nix search` avec les flakes ne fonctionne pas bien pour certains packages (récursif mais certains paquets désactivent l’évalution)
Meilleures solution :
- search.nixos.org
- `nix-index`  : installer puis `nix-indx` puis chercher par nom de ficher. Ex: `nix-locate bin/R`
** Développer un package
*** Hash
#+begin_src
nix-prefetch-url --unpack https://...tar.gz
#+end_src
Ou bien, ne pas mettre de hash et copier le résultat de l’erreur !
*** Débugger
[[https://nixos.wiki/wiki/Nixpkgs/Create_and_debug_packages][Source]]
https://nixos.wiki/wiki/Packaging/Tutorial
Pour nixpkgs, voir [[*Débugger un paquet][Débugger un paquet]]
Sans Flakes
#+begin_src nix
nix-shell -E 'with import <nixpkgs> {}; callPackage ./default.nix {}'
#+end_src
Avec Flakes
#+begin_src nix
nix develop .#my-package
#+end_src

Puis
#+begin_src nix
$ export out=~/tmpdev/bc-build/out
$ source $stdenv/setup
$ genericBuild
#+end_src
Pour faire une seule phase
#+begin_src nix
 phases="buildPhase checkPhase" genericBuild
#+end_src
NB: on peut faire aussi
#+begin_src nix
[nix-shell]$ eval ${unpackPhase:-unpackPhase}
[nix-shell]$ cd source
[nix-shell]$ eval ${configurePhase:-configurePhase}
[nix-shell]$ eval ${buildPhase:-buildPhase}
#+end_src

** Pour installer une seule dérivation
#+begin_src
nix-shell -p 'with import <nixpkgs>{}; callPackage pkgs/GenomeRef.nix {}'
#+end_src
Ne pas oublier {}
** Upgrade
Après avoir ajouté un channel:

nix.package = (import <nixos-unstable-small> {}).nix

** Patcher
#+begin_src
    nixpkgs.overlays = [
      # Patch to avoid out-of-memory errors in nix
      (final: prev: {
        nix = prev.nix.overrideAttrs (old: {
          patches = (old.patches or []) ++ [./0001-don-t-read-outputs-into-memory-for-output-rewriting.patch ];
        });
      })
      ] ;
#+end_src
** Nix profile
(Il faut choisir entre nix profile et nix-env !)
Cherche un programme, l’installer
Installer un programme
#+begin_src sh
nix profile search nixpkgs#zoxide
nix profile install nixpkgs#zoxide
#+end_src
Tout supprmier
#+begin_src sh
nix profile remove '.*'
#+end_src
*** Avec nushell
Il faut parfois mettre des guillemets, ex:
#+begin_src
nix profile install "nixpkgs#cabal-install"
#+end_src
* Nixpkgs
:PROPERTIES:
:ID:       54913542-41a8-44fc-9e23-ba6441c7ecd9
:END:
** Ajouter un nouveau paquet
https://nixos.wiki/wiki/Nixpkgs/Contributing
Tester dans nixpkgs qu’il compile
#+begin_src sh
nix-build -A mypackage
#+end_src
Tester les dépendenances
#+begin_src sh
nix-shell -p nixpkgs-review --run "nixpkgs-review rev HEAD"
#+end_src
** Débugger un paquet
#+begin_src sh
cd nixpkgs
mkdir lol
cd lol
nix-shell ../ -A kent
#+end_src
Le plus simple est d'utiliser genericBuild avec les différentes phases, exemple :
#+begin_src sh
phases="checkPhase installPhase" genericBuild
#+end_src

Liste des phases :
unpackPhase
patchPhase
configurePhase
buildPhase
checkPhase
installPhase
fixupPhase
installCheckPhase
distPhase

Voir :
https://nixos.wiki/wiki/Nixpkgs/Create_and_debug_packages
* Aide
** Paquet non trouvé "attribute is missing"
Ex:
nix-shell -p rPackages.BSgenome_Hsapiens_UCSC_hs1 error: attribute 'BSgenome_Hsapiens_UCSC_hs1' missing

1. Mettre à jour le channel
2. Sinon attention à la différence entre le channel de l'utiliser et du root.
   Par défaut, le channel de l'utilisateur n'est pas utilisé sauf si la configuration utilise <stable>.
   Le channel par défaut est nixpkgs (sinon nixos)  !!
* Avertissements
Ne jamais modifier les fichiers dans /nix/store
* Langage
[[id:f72cd4cf-c1ce-48ab-86df-50c0f2a850bd][Python Nix]]
[[id:ca9c0bc4-c72a-41b9-934c-5858ed11e1eb][R Nix]]
[[id:39c6a7a1-39ea-45f9-a647-6119b3f56837][Haskell Nix]]
** Vérifier les dépendences à l'exécution
Il faut les mettre dans propagatedBuildInputs (buildInputs ne suffit pas). On vérifie avec :
#+begin_src sh

$ nix-instantiate -E "with import <nixpkgs> {}; callPackage pkgs/hap-py.nix {}"
/nix/store/scbx1aiadh24qwwjhskp7jdqngsm31x7-hap.py.drv

$ nix-store -r /nix/store/scbx1aiadh24qwwjhskp7jdqngsm31x7-hap.py.drv
(...installation...)
/nix/store/kgxqmk7jdi91jwbrj4qz5q5c4qhh8qzb-hap.py

$ nix-store -q --references /nix/store/kgxqmk7jdi91jwbrj4qz5q5c4qhh8qzb-hap.py
#+end_src

Si le program en a besoin, wrapper le programme en rajoutant dans nativeBuildInputs makeWrapper :
#+begin_src sh
  nativeBuildInputs = [ pkgs.makeWrapper ];
  postBuild = with lib; with pkgs; ''
    wrapProgram $out/bin/test.sh\
      --prefix PATH : ${makeBinPath [ bcftools samtools]}
  '';
}
#+end_src
