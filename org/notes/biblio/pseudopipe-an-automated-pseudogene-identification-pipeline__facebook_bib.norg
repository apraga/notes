
@embed org
#+filetags:   :article:bib:
@end


@embed org
#+identifier: 20240716T170853
@end


@embed org
#+reference:  zhang2006pseudopipe
@end


Code {http://pseudogene.org/DOWNLOADS/pipeline_codes/ppipe.tar.gz}[http://pseudogene.org/DOWNLOADS/pipeline_codes/ppipe.tar.gz] 


Algorithme 


- input: génome (sans région répétée), ensemble des séquences protéiques et coordonnées des gènes fonctionnels 
- output: annotation des pseudogène 
~~ identification des régions similaire avec une protéine (BLAST) 
~~~ suppression des overlap >= 30bp avec gènes fonctionnels 
~~ suppression des doublons (segment avec plusieurs résultat du BLAST) 
~~~ Si mêm protéine, cela est du au fait que BLAST casse des longues séquences homologues en fragments courts 
~~~ sinon, cela est du à des protéines/domaine protéique homologues Partionnement en résultats disjoints. Parmi ceux-ci , on supprime ceux qui sont complètement contenu 
~~ Dans un ensemble disjoint, on fusionne les différents résultats BLAST.
Puis, parmi les ensembles adjacent qui correspondent à la même protéine, ils appartiennent au même pseudogène en fonction de la distance entre les résultats et la distance à la protéine Les trous entre les hits peuvent venir 
~~~ de zones non considérées par BLAST (faible complexité ou détériorée) 
~~~ petit ADN inséré 
~~~ séquence intronique dans les pseudogene dupliqué 
~~~ éléments répété 
~~ Paternité des pseudogènes : déterminée parmi les protéines paralogues en se basant sur 
~~~ similarité des séquence " 
~~~ meilleur e-value 
~~~ longueur de la protéine (cela suppose que le pseudogene est plus proche du gène parent original) Note: alignement amélioré avec tfasty en considérant la zone d'un pseudo-exon + 3*bp Python 

