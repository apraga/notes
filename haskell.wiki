= Learning Haskell =

== Libraries ==

=== <span class="done DONE">DONE</span> Shelly ===

=== <span class="todo TODO">TODO</span> Xmonad ===

# <span class="todo TODO">TODO</span> Récup de l'écran
# <span class="todo TODO">TODO</span> Faire un projet cabal

== Concepts ==

=== Functional dependencies ===

# <span class="done DONE">DONE</span> [https://www.youtube.com/watch?v=JleVecHAad4 An introduction to Haskell's kinds]
# <span class="done DONE">DONE</span> [https://www.youtube.com/watch?v=Qy_yxVkO8no Getting a little fancy with Haskell's kinds]

=== <span class="todo TODO">TODO</span> Backpack ===

# <span class="todo TODO">TODO</span> [http://blog.ezyang.com/2016/10/try-backpack-ghc-backpack/ Part 1]
## <span class="todo TODO">TODO</span> https://sebfisch.github.io/haskell-regexp/regexp-play.pdf
# <span class="todo TODO">TODO</span> [http://blog.ezyang.com/2017/01/try-backpack-cabal-packages/ Part 2]

=== <span class="done DONE">DONE</span> [https://www.quora.com/What-are-some-practical-uses-of-bifunctors-in-Haskell/answer/James-Bowen-13 Bifunctors] ===

== [https://www.reddit.com/r/haskell/comments/npxfba/ive_tried_to_learn_haskell_several_times_but_keep/h084wwa?utm_source=share&utm_medium=web2x&context=3 Monday Morning Haskell - Reddit] ==

=== <span class="done DONE">DONE</span> Foundational building blocks ===

* ☒ Functor https://mmhaskell.com/monads/functors
* ☒ https://mmhaskell.com/monads/applicatives
* ☒ https://mmhaskell.com/monads/tutorial
* ☒ https://mmhaskell.com/monads/reader-writer
* ☒ https://mmhaskell.com/monads/state
* ☒ https://mmhaskell.com/monads/transformers
* ☐ https://mmhaskell.com/monads/laws

=== <span class="todo TODO">TODO</span> real-world example ===

* ☒ Database
* ☐ API

=== <span class="todo TODO">TODO</span> Relax for a few days and watch how interactive programs are being composed ===

=== <span class="todo TODO">TODO</span> Get back to the real-world example and make it a complete Cabal project. ===

=== <span class="done DONE">DONE</span> [https://mmhaskell.com/testing/test-driven-development Testing] ===

== Cabal vs stack ==

Stack: facile à utiliser mais parfois non à jour Cabal: utiliser avec ghcup NB: Sous archlinux, le linking dynamique est utilisé par défaut et ne semble pas marcher avec cabal. Par exemple, wreq ne trouve pas le Prelude.. On peut installer ghc-static ou bien utiliser ghcup (recommandé [https://github.com/haskell/haskell-ide-engine/issues/1647 ici] )

* ☒ installer avec ghcup
* ☒ Tester sur getbook
* ☒ Tester sur askhistorians

= Livres =

== KILL Learn Haskell for your greater good ==

50%

== STRT [[books.org::Haskell%20Programming%20From%20First%20Principles|Haskell programming from first principles]] ==

= Contributing =

== GHC ==

=== <span class="todo TODO">TODO</span> [https://gitlab.haskell.org/ghc/ghc/-/issues/20261 20261] ===

# WAIT Rebase

=== <span class="todo TODO">TODO</span> Lire commentary ===

=== <span class="done DONE">DONE</span> STRT Lire https://www.aosabook.org/en/ghc.html ===

== Panopticum ==

<span class="todo TODO">TODO</span> [https://foss.heptapod.net/bsdutils/panopticum/-/issues Issues]

Faire les version faciles (refactoring prévu)

== <span class="todo TODO">TODO</span> Regarder pourquoi OPTION<sub>RADIO</sub> ne passe pas (cf test) ==

DEADLINE: &lt;2021-09-08 Wed&gt; SCHEDULED: &lt;2021-09-07 Tue&gt;

== Darcs ==

=== <span class="todo TODO">TODO</span> –mirror ===

[[notmuch:id:shf0ni$h6s$1@ciao.gmane.io][Email from Ben Franksen: Re: [darcs-users] Darcs equivalent of force-pushing and branching]] [http://bugs.darcs.net/issue2683 Issue]

<ol style="list-style-type: decimal;">
<li><p><span class="todo TODO">TODO</span> Version interactive</p>
<ol style="list-style-type: decimal;">
<li><p>Structure</p>
<p>Apply.hs: [[~/code/darcs/src/Darcs/UI/Commands/Apply.hs::applyCmdCommon%20patchApplier%20patchProxy%20opts%20bundle%20repository%20=%20do|applyCmdCommon]] contient</p>
<ul>
<li>la liste interactives des patches créé par runSelection [[~/code/darcs/src/Darcs/UI/SelectChanges.hs::runSelection%20_%20PSC%20%7B%20splitter%20=%20Just%20_%20%7D%20=|runSelection]] -&gt; [[home/alex/code/darcs/src/Darcs/UI/SelectChanges.hs::runInvertibleSelection%20::%20forall%20p%20wX%20wY%20.|runInvertibleSelection]]</li></ul>

<p>-&gt; [[~/code/darcs/src/Darcs/UI/SelectChanges.hs::textSelect%20lps'%20pcs%20=|textSelect]] qui pose les questions à l'utilisateur</p>
<ul>
<li>le merge qui contient la nouvelle stratégie du merge, appelé par</li></ul>

<p>applyPatches, instancié dans [[~/code/darcs/src/Darcs/UI/ApplyPatches.hs::standardApplyPatches%20::%20(RepoPatch%20p,%20ApplyState%20p%20~%20Tree)|standardApplyPatches]] -&gt; [[~/code/darcs/src/Darcs/UI/ApplyPatches.hs::mergeAndTest%20::%20(RepoPatch%20p,%20ApplyState%20p%20~%20Tree)|mergeAndTest]] qui contient l'option mirroir</p></li>
<li><p>Rajouter une 2eme phase de sélection avec liste des patches à supprimer</p></li>
<li><p>Merge standard si tous les patches ne sont pas sélectionnés</p></li>
<li><p>-a/–all affecte les 2 phases ou non ?</p></li></ol>
</li></ol>
