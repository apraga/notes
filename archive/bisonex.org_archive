#    -*- mode: org -*-


Archived entries from file /home/alex/org/projects/bisonex.org


* DONE Vérifier qualité données sur mesocentre
CLOSED: [2023-01-12 Thu 15:48]
:PROPERTIES:
:ARCHIVE_TIME: 2023-01-12 Thu 15:48
:ARCHIVE_FILE: ~/org/projects/bisonex.org
:ARCHIVE_OLPATH: Données
:ARCHIVE_CATEGORY: bisonex
:ARCHIVE_TODO: DONE
:END:
** DONE BAM
CLOSED: [2023-01-12 Thu 15:47]
picard ValidateSamFile
On regarde juste le code d'erreur (0 = pas d'erreur)
** DONE Fastq
CLOSED: [2023-01-12 Thu 15:48]
fastqc
Il faut ensuite extraire les zip and chercher les erreur dedans

* KILL Implémenter d’autres pipeline
CLOSED: [2023-01-15 Sun 12:03]
:PROPERTIES:
:ARCHIVE_TIME: 2023-01-15 Sun 12:03
:ARCHIVE_FILE: ~/org/projects/bisonex.org
:ARCHIVE_CATEGORY: bisonex
:ARCHIVE_TODO: KILL
:END:
Voir https://bmcbioinformatics.biomedcentral.com/articles/10.1186/s12859-021-04407-x
** KILL GATK
CLOSED: [2022   -11-11 Fri 20:01]
https://broadinstitute.github.io/warp/docs/Pipelines/Exome_Germline_Single_Sample_Pipeline/README
A priori, respecte les bonnes pratiques
** KILL Essayer snmake avec bonne pratiques
https://github.com/snakemake-workflows/dna-seq-gatk-variant-calling/blob/main/.github/workflows/main.yml
Installer Mamba (micromamba ne fonctionne pas sous nix)
Ne fonctionne pas sous WSL2... MultiQC n’est pas assez à jour
Problèmes de versions...
** KILL Sarek
CLOSED: [2022-12-11 Sun 11:09]
*** Dépendences
**** Nix
#+begin_src sh
 nix profile install nixpkgs#mosdepth nixpkgs#python3
  nix-shell -p python310Packages.pyyaml --run "nextflow run nf-core/sarek -profile test --executor slurm --queue smp --outdir test -resume"
#+end_src
***** KILL derivation nix pour profile complet
CLOSED: [2022-12-11 Sun 11:09]
**** KILL Sans nix
CLOSED: [2022-09-24 Sat 10:20]
On utilise conda
#+begin_src sh
module unload nix
module load anaconda3@2021.05/gcc-12.1.0
module load nextflow@22.04.0/gcc-12.1.0
module load openjdk@11.0.14.1_1/gcc-12.1.0
nextflow run nf-core/sarek -profile conda,test --executor slurm --queue smp --outdir test -resume
#+end_src
Essai 1: erreurs de permissions, corrigé en relancant le programme
#+begin_quote
  Failed to create Conda environment
  command: conda create --mkdir --yes --quiet --prefix /Work/Users/apraga/test-sarek/work/conda/env-2d53b1db50de676670cf1a91ef0cf6db bioconda::tabix=1.11
  status : 1
  message:
    NotWritableError: The current user does not have write permissions to a required path.
      path: /Home/Users/apraga/.conda/pkgs/urls.txt
      uid: 1696
      gid: 513

    If you feel that permissions on this path are set incorrectly, you can manually
    change them by executing

      $ sudo chown 1696:513 /Home/Users/apraga/.conda/pkgs/urls.txt
#+end_quote
Corrigé avec
#+begin_src sh
      chown 1696:513 /Home/Users/apraga/.conda/pkgs/urls.txt
#+end_src
Mais problème de proxy
*** KILL Dérivation nix pour modules python
CLOSED: [2022-12-11 Sun 11:09]
*** KILL Lancer sarek en mode test
CLOSED: [2022-12-11 Sun 11:09]
#+begin_src sh
  nix-shell -p python310Packages.pyyaml --run "nextflow run nf-core/sarek -profile test --executor slurm --queue smp --outdir test -resume"
#+end_src
*** KILL Lancer sarek sur données allégées
CLOSED: [2022-12-11 Sun 11:09]

* DONE Essai 1
CLOSED: [2023-02-13 Mon 11:50]
:PROPERTIES:
:ARCHIVE_TIME: 2023-02-14 Tue 10:42
:ARCHIVE_FILE: ~/org/projects/bisonex.org
:ARCHIVE_OLPATH: Nouveau workflow/Dépendences avec Nix/hap.py/Faire fonctionner Tests
:ARCHIVE_CATEGORY: bisonex
:ARCHIVE_TODO: DONE
:END:
Problème avec chemin python pour pysam : Tools/__init__.py échoue mais on peut utilise build/bin/hap.py
#+begin_src
nix develop .#hap-py
$ genericBuild
#+end_src

On lance donc les tests à la main (trop d'erreurs sur les chemins)
#+begin_src
# OK !
HCDIR=build/bin build/bin/test_haplotypes

# OK !
bash src/sh/make_hg19.sh
HCDIR=build/bin HG19=hg19.fa bash src/sh/run_multimer
ge_test.sh
#+end_src

Écheck sur
$ HCDIR=build/bin bash src/sh/run_hapenum_test.sh
Traceback (most recent call last):
  File "build/bin/hap.py", line 26, in <module>
    import pysam
  File "/nix/store/3w2v5cl4x6ddq4281awcab9412r5gkaw-python3-3.10.9-env/lib/python3.10/site-packages/pysam/__init__.py", line 4, in <module>
    from pysam.libchtslib import *
ImportError: No module named libchtslib
IL faut commenter detect var


* DONE Awk
CLOSED: [2023-03-12 Sun 22:12]
:PROPERTIES:
:ARCHIVE_TIME: 2023-03-12 Sun 22:19
:ARCHIVE_FILE: ~/org/projects/bisonex.org
:ARCHIVE_OLPATH: Tests/Validation : NA12878/GIAB/Exons seuls/D'où vient la différence ?/Statistiques
:ARCHIVE_CATEGORY: GIAB
:ARCHIVE_TODO: DONE
:END:
NB: awk car bcftools query ne semble pas prendre en compte les nouvelles colonnes

On confirnme le nombre de SNP:
❯ awk '!/^#/ && $10~/:FN:/ && $10~/SNP/' test-allchr.vcf  | wc -l
6665


Une minorité concerne des problème d'haploides
❯ awk '!/^#/ && $10~/:FN:/ && $11!~/NOCALL/ && $10~/SNP/' test-allchr.vcf
304
avec 1/3 où l'exome manque une allèles
❯ awk '!/^#/ && $10~/:FN:/ && $11!~/NOCALL/ && $10~/SNP/ && $10~/homalt/' test-allchr.vcf  | wc -l
101
et 2/3 où il y a une allèle "en trop"

La majorité ne sont pas vu
❯ awk '!/^#/ && $10~/:FN:/ && $11~/NOCALL/ && $10~/SNP/' test-allchr.vcf  | wc -l
6361

Nombre de reads pour chaque position en bash (!)
#+begin_src bash
 awk '!/^#/ && $10~/:FN:/ && $11~/NOCALL/ && $10~/SNP/ {print $1":"$2"-"$2}' test-allchr.vcf  |  xargs -I {} sh -c 'echo -n {}";"; samtools view ../NA12878_NIST.b
am {} | wc -l' > count.csv
#+end_src

* KILL Julia
CLOSED: [2023-03-13 lun. 11:11]
:PROPERTIES:
:ARCHIVE_TIME: 2023-03-13 lun. 15:52
:ARCHIVE_FILE: c:/Users/apraga/org/projects/bisonex.org
:ARCHIVE_OLPATH: Tests/Validation : NA12878/GIAB/Exons seuls/D'où vient la différence ?/Statistiques
:ARCHIVE_CATEGORY: GIAB
:ARCHIVE_TODO: KILL
:END:
Conflict BAM et vcf
#+begin_src julia
using GeneticVariation

reader = VCF.Reader(open("../out/test-bed/test-allchr.vcf", "r"))
fn = 0
notSeen = 0
missingAllel = 0
surnumAllel = 0
for record in reader
    global fn, notSeen
    global missingAllel, surnumAllel
    if VCF.genotype(record)[1][2] == "FN" && VCF.genotype(record)[1][5] == "SNP"
        # println(record)
        # println("$(VCF.chrom(record))  $(VCF.pos(record))")
        fn = fn +1
        if VCF.genotype(record)[2][5] == "NOCALL"
            notSeen = notSeen + 1
        else
            if VCF.genotype(record)[1][6] == "homalt"
                missingAllel = missingAllel + 1
            elseif VCF.genotype(record)[2][6] == "homalt"
                surnumAllel = surnumAllel + 1
            end
        end
    end
end
close(reader)
println("SNP: false negative $fn")
println("SNP: not seen $notSeen")
println("SNP: missing allel $missingAllel")
println("SNP: surnumeraries allel $surnumAllel")
#+end_src

SNP: false negative 6665
SNP: not seen 6361
SNP: missing allel 101
SNP: surnumeraries allel 203

1. On confirme le nombre de SNP.
2. Une minorité concerne des problème d'haploides avec
   - 1/3 où l'exome manque une allèles
   - 2/3 où il y a une allèle "en trop"
3. La majorité ne sont pas vu (6361)

Nombre de reads pour chaque position en bash (!)
#+begin_src bash
 awk '!/^#/ && $10~/:FN:/ && $11~/NOCALL/ && $10~/SNP/ {print $1":"$2"-"$2}' test-allchr.vcf  |  xargs -I {} sh -c 'echo -n {}";"; samtools view ../NA12878_NIST.b
am {} | wc -l' > count.csv

* KILL Reads en dehors des exons
CLOSED: [2023-03-09 Thu 22:43]
:PROPERTIES:
:ARCHIVE_TIME: 2023-03-13 lun. 15:55
:ARCHIVE_FILE: c:/Users/apraga/org/projects/bisonex.org
:ARCHIVE_OLPATH: Tests/Validation : NA12878/GIAB/Exons seuls/D'où vient la différence ?/Statistiques
:ARCHIVE_CATEGORY: GIAB
:ARCHIVE_TODO: KILL
:END:
Ça a l'air sur des exemples simples ...
#+begin_src sh
wget https://ftp.ncbi.nlm.nih.gov/refseq/H_sapiens/annotation/GRCh38_latest/refseq_identifiers/GRCh38_latest_genomic.gff.gz
awk '/BestRefSeq\texon/ && /transcript_id=NM/ {print $1"\t"$4"\t"$5;}' GRCh38_latest_genomic.gff | grep ^NC | save exons.csv
#+end_src

#+begin_src julia
using CSV, DataFrames, Intervals

# Check the number of reads for each false negative (stored in count.csv)
# from hap.py output:
# awk '!/^#/ && $10~/:FN:/ && $11~/NOCALL/ && $10~/SNP/ {print $1":"$2"-"$2}' test-allchr.vcf  |  xargs -I {} sh -c 'echo -n {}";"; samtools view ../NA12878_NIST.b am {} | wc -l' > count.csv

function groupedCount(fname)
    f = DataFrame(CSV.File(fname, header=false))
    transform!(f, :Column1 => ByRow(x -> string.(split(x, ":"))[1]) => :chrom)
    transform!(f, :Column1 => ByRow(x -> parse(Int64, string.(split(x, "-"))[2])) => :pos)
    select!(f, Not([:Column1]))
    rename!(f, :Column2 => :nb)
    groupby(f, :chrom)
end

function groupedExons(fname)
    f = DataFrame(CSV.File(fname, header=["chrom", "start", "end"], delim="\t"))
    transform!(f, [:start, :end] => ByRow((x,y) -> Interval(x, y)) => :interval)
    select!(f, Not([:start, :end]))
    groupby(f, :chrom)
end

# Check is position x is in exons for chromosome chr
function isExon(x, exons, chr)
    # Remove duplicates
    exonsU = unique(exons[chr])
    res = transform(exonsU, :interval => ByRow(z -> x in z) => :check)
    # Result only found interval
    found = res[res.check,:].interval
    isempty(found) ? missing : first(found)
end

reads = groupedCount("../NA12878/happy/count.csv")
exons = groupedExons("exons.csv")

for g in range(1, size(reads)[1])
    local found
    found = transform(reads[g], :pos => ByRow(x -> isExon(x, exons, g)) => :exon)
    readsMissing = found[ismissing.(found.exon), :]
    # print("$(k.chrom):")
    print(g)
    print(": $(size(reads[g])[1]) reads, ")
    println("$(size(readsMissing)[1]) not in exons")
end
#+end_src
1: 448 reads, 64 not in exons
2: 307 reads, 47 not in exons
3: 228 reads, 37 not in exons
4: 175 reads, 28 not in exons
5: 237 reads, 38 not in exons
6: 1223 reads, 304 not in exons
7: 274 reads, 52 not in exons
8: 414 reads, 41 not in exons
9: 161 reads, 47 not in exons
10: 194 reads, 37 not in exons
11: 304 reads, 39 not in exons
12: 254 reads, 32 not in exons
13: 168 reads, 120 not in exons
14: 184 reads, 26 not in exons
15: 250 reads, 90 not in exons
16: 239 reads, 29 not in exons
17: 373 reads, 35 not in exons
18: 85 reads, 17 not in exons
19: 576 reads, 46 not in exons
20: 83 reads, 22 not in exons
21: 67 reads, 14 not in exons
22: 117 reads, 24 not in exons


* KILL Répartition par chromosome: variable mais seul le 6 = hotspot
CLOSED: [2023-03-07 Tue 22:44]
:PROPERTIES:
:ARCHIVE_TIME: 2023-03-13 lun. 15:55
:ARCHIVE_FILE: c:/Users/apraga/org/projects/bisonex.org
:ARCHIVE_OLPATH: Tests/Validation : NA12878/GIAB/Exons seuls/D'où vient la différence ?/Statistiques
:ARCHIVE_CATEGORY: GIAB
:ARCHIVE_TODO: KILL
:END:
#+begin_src julia
using CSV, DataFrames
f = DataFrame(CSV.File("count.csv", header=false))
size(f[f.Column2 .< 10,:])
#+end_src
(4430, 2)


#+begin_src julia
using CSV, DataFrames

function cleanCount(fname)
    f = DataFrame(CSV.File(fname, header=false))
    transform!(f, :Column1 => ByRow(x -> string.(split(x, ":"))[1]) => :chrom)
    transform!(f, :Column1 => ByRow(x -> string.(split(x, "-"))[2]) => :pos)
    select!(f, Not([:Column1]))
    rename!(f, :Column2 => :nb)
end

f = cleanCount("count.csv")
grouped = groupby(f, :chrom)
for (k, g) in pairs(grouped)
    println("$(k.chrom): $(size(g, 1))")
end
#+end_src

#+RESULTS:
: NC_000001.11: 448
: NC_000002.12: 307
: NC_000003.12: 228
: NC_000004.12: 175
: NC_000005.10: 237
: NC_000006.12: 1223
: NC_000007.14: 274
: NC_000008.11: 414
: NC_000009.12: 161
: NC_000010.11: 194
: NC_000011.10: 304
: NC_000012.12: 254
: NC_000013.11: 168
: NC_000014.9: 184
: NC_000015.10: 250
: NC_000016.10: 239
: NC_000017.11: 373
: NC_000018.10: 85
: NC_000019.10: 576
: NC_000020.11: 83
: NC_000021.9: 67
: NC_000022.11: 117


* KILL Awk
CLOSED: [2023-03-12 Sun 22:12]
:PROPERTIES:
:ARCHIVE_TIME: 2023-03-13 lun. 15:55
:ARCHIVE_FILE: c:/Users/apraga/org/projects/bisonex.org
:ARCHIVE_OLPATH: Tests/Validation : NA12878/GIAB/Exons seuls/D'où vient la différence ?/Statistiques
:ARCHIVE_CATEGORY: GIAB
:ARCHIVE_TODO: KILL
:END:
NB: awk car bcftools query ne semble pas prendre en compte les nouvelles colonnes

On confirnme le nombre de SNP:
❯ awk '!/^#/ && $10~/:FN:/ && $10~/SNP/' test-allchr.vcf  | wc -l
6665


Une minorité concerne des problème d'haploides
❯ awk '!/^#/ && $10~/:FN:/ && $11!~/NOCALL/ && $10~/SNP/' test-allchr.vcf
304
avec 1/3 où l'exome manque une allèles
❯ awk '!/^#/ && $10~/:FN:/ && $11!~/NOCALL/ && $10~/SNP/ && $10~/homalt/' test-allchr.vcf  | wc -l
101
et 2/3 où il y a une allèle "en trop"

La majorité ne sont pas vu
❯ awk '!/^#/ && $10~/:FN:/ && $11~/NOCALL/ && $10~/SNP/' test-allchr.vcf  | wc -l
6361

Nombre de reads pour chaque position en bash (!)
#+begin_src bash
 awk '!/^#/ && $10~/:FN:/ && $11~/NOCALL/ && $10~/SNP/ {print $1":"$2"-"$2}' test-allchr.vcf  |  xargs -I {} sh -c 'echo -n {}";"; samtools view ../NA12878_NIST.b
am {} | wc -l' > count.csv
#+end_src

* KILL Comprendre/améliorer Recall SNP 0.855
CLOSED: [2023-03-13 lun. 15:55] SCHEDULED: <2023-03-04 Sat>
:PROPERTIES:
:ARCHIVE_TIME: 2023-03-13 lun. 15:55
:ARCHIVE_FILE: c:/Users/apraga/org/projects/bisonex.org
:ARCHIVE_OLPATH: Tests/Validation : NA12878/GIAB/Exons seuls/D'où vient la différence ?/Statistiques
:ARCHIVE_CATEGORY: GIAB
:ARCHIVE_TODO: KILL
:END:
 on est inférieur à Kumaran et al 2019
** KILL Regarder les FN (SNP)
CLOSED: [2023-03-13 lun. 15:55] SCHEDULED: <2023-03-04 Sat  >
*** Manuel:
NC_000001.11:1385919 pas de read 1/1:FN:.:i1_5:INDEL:homalt:.
NC_000001.11:1623412 1 read     1/1:FN:.:ti:SNP:homalt:.
NC_000001.11:1668449 33 read sur 160 voient l'allèle alternative 1/1:FN:am:ti:SNP:homalt:.
NC_000001.11:1676135 67 reads, non vu 0/1:FN:.:ti:SNP:het:.
NC_000001.11:1734812 1/1:FN:.:ti:SNP:homalt:.
NC_000001.11:1745808 1/1:FN:.:ti:SNP:homalt:.
NC_000001.11:1745814 1/1:FN:.:ti:SNP:homalt:.
NC_000001.11:1953616 1/1:FN:.:ti:SNP:homalt:.
NC_000001.11:2512975 0/1:FN:.:ti:SNP:het:
