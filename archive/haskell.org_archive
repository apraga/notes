#    -*- mode: org -*-


Archived entries from file /home/alex/code/blog/notes/haskell.org


* DONE Simplifier
  DEADLINE: <2021-09-08 Wed> SCHEDULED: <2021-09-07 Tue>
  :PROPERTIES:
  :ARCHIVE_TIME: 2021-09-09 Thu 12:20
  :ARCHIVE_FILE: ~/code/blog/notes/haskell.org
  :ARCHIVE_OLPATH: GHC/20261
  :ARCHIVE_CATEGORY: ghc
  :ARCHIVE_TODO: DONE
  :END:

    On fait les tests avec stack:
    #+begin_src fish
    set PATH $PATH ~/softwares/ghc-9.0.1/bin/
    stack build --system-ghc --resolver "ghc-9.0.1"
    #+end_src

    Et
        #+begin_src fish
    stack build --system-ghc --resolver "ghc-8.10.7"
    #+end_src

    Résultats
Long version (4k lines of code)
- 8.10.7
!!! Renamer/typechecker [Parse]: finished in 820.76 milliseconds, allocated 512.257 megabytes
- 9.0.1 is bad
!!! Renamer/typechecker [Parse]: finished in 13214.27 milliseconds, allocated 26776.972 megabytes

Mid version (1.7k)
- 8.10.7
!! Renamer/typechecker [Parse]: finished in 380.19 milliseconds, allocated 197.154 megabytes
- 9.0.1
!!! Renamer/typechecker [Parse]: finished in 1271.98 milliseconds, allocated 2834.054 megabytes

|        | Long (ms) | Medium (ms) |
| 8.10.7 |    820.76 |      380.19 |
|  9.0.1 |  13214.27 |     1271.98 |
| Factor |     16.10 |        3.34 |
Attention, Parser.hs n'était pas la bonne version, il faut utiliser celle de stack...
#+begin_src
fd Parse.hs .stack-work
#+end_src

* STARTED Lire  https://www.aosabook.org/en/ghc.html   
  DEADLINE: <2021-09-11 Sat>
  :PROPERTIES:
  :ARCHIVE_TIME: 2021-09-14 Tue 10:58
  :ARCHIVE_FILE: ~/code/blog/notes/haskell.org
  :ARCHIVE_OLPATH: Contributing/GHC
  :ARCHIVE_CATEGORY: ghc
  :ARCHIVE_TODO: STARTED
  :END:


* DONE Haskell love
  DEADLINE: <2021-09-10 Fri>
  :PROPERTIES:
  :ARCHIVE_TIME: 2021-09-30 Thu 17:46
  :ARCHIVE_FILE: ~/code/blog/notes/haskell.org
  :ARCHIVE_OLPATH: Conference
  :ARCHIVE_CATEGORY: haskell
  :ARCHIVE_TODO: DONE
  :END:
 - [X] All You Wanted to Know About Type Classes (Alejandro Serrano Mena)
   Paterson condition (see Flexible Constraints) for defining constraints
 - [X] Exceptions and concurrency ( Ivan Gromakovskii )
   + Use safe-exceptions (good documentation)
   + With threads, use async library: if the children raise an exception, it will wait forever otherwise.
   Use concurrently
 - [X]  Competitive Programming in Haskell (Brent Yorgey)
   Manque le début
 - [X]  Sound design with Haskell (Anton Kholomiov)
   Manque la fin

* Conference
  :PROPERTIES:
  :ARCHIVE_TIME: 2021-09-30 Thu 17:46
  :ARCHIVE_FILE: ~/code/blog/notes/haskell.org
  :ARCHIVE_CATEGORY: haskell
  :END:
